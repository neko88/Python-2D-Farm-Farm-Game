
Notes:
    'Delta Time': time difference between previous frame drawn and the current frame.
    'FPS': Frame rate which is frequency in which the frame is updated n times per second.
        - Each iteration of the game loop, a new frame is drawn
        - Frame rate affects the number of times the loop runs

    CPU differs
        - Compiles code into machine-level instructions
    'Clock Speed': Speed of CPU is how many instructions it can execute in a second

Frame Rate Dependency
    - If speed depends on FPS, it will differ among different hardware

    units per frame = n.units per sec // FPS

Delta Time
    - Allows code to be independent from FR

    *****
    Delta Time = Obj speed // FPS
    Obj speed = Delta Time * FPS
    Vector2 Move = direction * obj speed * delta time
    *****

    Thus, object speed is based on Delta Time

    - Delta time useful when moving characters
    - Independent of frame rate
        eg. object needs to travel n meters/second in game


----- main.py -----
Create main.py file and basic files like settings.py and levels.py with imports.

Create a game class which initializes basic setup of the game:
    - pygame.init()
    - the screen
    - clock, and setting tick
    - run function
        - loop event for running game, condition for exit
        - update display

    Execute running of the game


---- levels.py -----
    pygame.display.get_surface() gets from the main surface screen
    and draws directly on it



---- player.py ----
    - First we create 'image' with a placeholder of a sprite filled with a colour.
    - Key movement -> up subtracts 1 because our coordinates start at the top-left corner at (0,0)
    - Vector2() -> updates to x or y shows as [x, y]
        - Rect vs. Vector2 : int vs float (dt)
        - Calculating Vector2 position and then positioning it in the Rect
    - Diagonal movement: Pythagorean theorem; speed will differ
        - Normalize the vector so that direction is same magnitude
            u = (x, y) // sqrt(x^2 + y^2)

      ** Dictionary storing { 'folder_name' : ['img1.png', 'img2.png] } access by 'folder_name'
    - load assets: Create a dictionary for key value pairs.
    Key: file name, Value: arrau of objects
    - from os import walk: allows walking in a folder path
    - loop through path files and for each, make new path where the variable can access the
    image individually: ../assets/char1/stand.png
    - use pygame to load the image to a surface, and append it to the surface list
        - each surface list contains a different animation:
        eg. for anim up: surface_list[ up/1.png, up/2.png ]

ANIMATIONS:
    - looping each surface list for a specific object status.
    - set the frame index back to 0 when it reaches a value => length of the anims in a status
    - frame index depends on speed and delta time; how fast it will animate
    - use 'split' function to change the string title of the status
        - because it returns a list, access by indexing [0]

TOOLS:
    - need to make timer for object use
    **pygame.time.get_ticks() -> gets the time relative to the running app
    - timer needs an active and deactive
    - timer needs to be updated in the game loop
    - after a certain action is done, frame index should be 0 to stop it

SWITCHING TOOLS:
    - if a key is pressed, and the tool switch timer is not active, switch
        - this is for indexing the tool list, if it is active, it will stop at the item's index


----- Overlay.py ------
    - Overlay for items
    - Import image files for items by pygame.load.image()
    - Selection of surface based on player's current item selected
    - Get the rect of the selected surface, add its position for the window
    - Draw it by pygame.display.get_surface().blit(surface, rect)

------ Level.py ------
    - Create a camera group for all_sprites -> ..= CameraGroup()
    - Create a dictionary of 'Layers' for the object placement on the screen
    - Each sprite needs to be assigned a layer - which is its z-axis

CAMERA ON PLAYER
    - The map moves opposite x and y from the player's movement.
    - First get the offset of the player relative to the screen
        - The screen is /2 because the player's center is moving on one of the axis half
    - The movement is by setting the overlay/images center rect WRT offset of the player

    - Set layer visibility by the draw function, if sprite's z value is a certain layer, display in that order
    - Each tile in the tmx_data layer is its own object and a certain position
    - To make the player be on top / bottom of an item, need the sprite/objects centery.
        - Each frame sorts the center.y which reflects on what is on top